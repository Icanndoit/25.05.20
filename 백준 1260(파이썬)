def DFS(graph, n, v):
    DFSvisit[v] = 1
    print(v, end=" ")
    for i in range(1, n + 1):
        if graph[v][i] == 0 or DFSvisit[i] == 1:
            continue
        DFS(graph, n, i)


def BFS(graph, n, v):
    queue = []
    queue.append(v)
    
    BFSvisit[v] = 1
    while len(queue) != 0:
        v = queue[0]
        print(queue[0], end=" ")
        del queue[0]
        for i in range(1, n + 1):
            if graph[v][i] == 1 and BFSvisit[i] == 0:
                queue.append(i)
                BFSvisit[i] = 1

n, m, v = map(int, input().split())  # 정점의 개수, 간선의 개수, 시작 노드

graph = [[0] * (n + 1) for _ in range(n + 1)]
DFSvisit = [0] * (n + 1) # 모든 요소가 0인 (n + 1)길이의 일차원 배열 생성
BFSvisit = [0] * (n + 1)

for i in range(m):
    a, b = map(int, input().split())
    if a != b:
        graph[a][b] = graph[b][a] = 1

DFS(graph, n, v)
print()
BFS(graph, n, v)
